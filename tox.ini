# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
#passenv =
#  PYTHONPATH
#  HOME
#  PATH
#  CHARM_BUILD_DIR
#  MODEL_SETTINGS
#  HTTP_PROXY
#  HTTPS_PROXY
#  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:render-k8s]
description = Render the k8s charm
allowlist_externals = cp
commands =
    cp {toxinidir}/src/k8s_charm.py {toxinidir}/src/charm.py
    cp {toxinidir}/k8s_metadata.yaml {toxinidir}/metadata.yaml

[testenv:render-machine]
description = Render the machine charm
allowlist_externals = cp
commands =
    cp src/machine_charm.py src/charm.py
    cp machine_metadata.yaml metadata.yaml

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8 < 5
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache --skip *.svg

    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
description = Run static analysis checks
deps =
    mypy
    types-dataclasses
    types-PyYAML
    types-requests
    types-urllib3
    charm: -r{toxinidir}/requirements.txt
    lib: ops
commands =
    charm: mypy {[vars]src_path} {posargs}

[testenv:unit]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.txt
    pytest
    coverage[toml]
    deepdiff
    toml
    responses
allowlist_externals = cp
commands =
    # use a better solution when we actually have machine code
    cp src/k8s_charm.py src/charm.py
    cp k8s_metadata.yaml metadata.yaml

    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report -m

[testenv:integration]
description = Run integration tests
deps =
    aiohttp
    asyncstdlib
    # Libjuju needs to track the juju version
    juju
    pytest
    prometheus-api-client
    pytest-operator
allowlist_externals = cp
commands =
    # use a better solution when we actually have machine code
    cp src/k8s_charm.py src/charm.py
    cp k8s_metadata.yaml metadata.yaml

    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/integration

[testenv:check]
depends =
    lint
    static

[coverage:run]
relative_files = True
